Explanation of algorithm for Task 4:

Take an example array of signed integers:

We assume the array has at least one negative element.  We will
check for this at the beginning of the program.  If the array
does not contain at least one negative element, then the task
reduces to finding the lowest valued single element in the array
and will not be discussed further here.

Index:	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
Value:	7	1	-2	-5	3	8	-9	-4	5	-7	6	-4	-1	2	-8	11

We notice that we can trim any subsequence of positive numbers
on the left and right ends of the array, since their inclusion
onto the ends of any other subarray would certain increase
the sum, instead of decreasing it.

So excising all positive values at the ends, we can set the left
and right bounds to the portion of the array we wish to focus
our efforts on, thus.

Index:	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
Value:	7	1	-2	-5	3	8	-9	-4	5	-7	6	-4	-1	2	-8	11
Marker:			LB												RB

Aux Array

Index:	0	1	2	3	4	5	6	7	8
Value:	-7	11	-13	5	-7	90	-5	1	-7
Marker			*
Bound			[		]


Index:	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
Value:	7	1	-2	-1	3	8	-9	-4	5	-7	6	-4	-1	2	-8	11
								LB								RB